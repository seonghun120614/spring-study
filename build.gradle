plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 기본 Spring Boot 스타터에서 로깅은 Logback 이라 제외 필요
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}// SERVLET, REACTIVE, NONE

	// 기본 Spring Boot 스타터에서 로깅은 Logback 이라 제외 필요
	implementation('org.springframework.boot:spring-boot-starter') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// log4j2
	implementation('org.springframework.boot:spring-boot-starter-log4j2') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// Bean Validation
	implementation('org.springframework.boot:spring-boot-starter-validation') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// Lombok - getter, setter, toString, Constructor 자동 생성
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	// passay - password 규칙
	implementation 'org.passay:passay:1.6.3'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'junit', module: 'junit' // JUnit 4 제외
		exclude group: 'org.mockito', module: 'mockito-core' // 필요 시
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' // JUnit 3/4 호환 제거
	}

	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

	// log4j-to-slf4j는 제거해야 함 (충돌 발생하므로)
	// log4j-slf4j2-impl 만 유지하면 SLF4J API도 Log4j2에서 처리 가능
	// SLF4J API -> log4j2로 연결
	runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootJar') {
	archiveFileName = 'myapp.jar'
}